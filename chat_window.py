import logging
import sys
import time

from PyQt6.QtCore import Qt, pyqtSignal, QTimer, QThread
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTextEdit, QComboBox, QLabel,
    QSplitter, QFrame, QScrollArea, QSpinBox, QDoubleSpinBox,
    QMessageBox, QGroupBox, QFormLayout
)

from lmstudio_settings import LmStudioSettings
from ollama_api import OllamaAPI
from ollama_settings import OllamaSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)


class ChatHistory(QTextEdit):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setReadOnly(True)
        self.response_start_pos = None
        self.current_message_html = ""
        self.is_system_message = False

    def add_system_message(self, text: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –∑–∞–ø—É—Å–∫–µ –º–æ–¥–µ–ª–∏)
        """
        self.is_system_message = True
        message_html = (
            f'<div style="margin: 10px 0; padding: 8px; '
            f'background-color: #E3F2FD; border-radius: 8px; '
            f'color: #1565C0; font-style: italic;">{text}</div>'
        )
        self._insert_message_safely(message_html)
        self.is_system_message = False

    def add_message(self, text: str, is_user: bool = False, performance_info: dict = None):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
        """
        if not text.strip() and not performance_info:
            logging.info(
                f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è performance_info:{performance_info} text: {text}")
            return

        sender = "–í—ã" if is_user else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        color = "#2962FF" if is_user else "#00838F"
        bg_color = "#F5F5F5" if is_user else "#FFFFFF"

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        message_html = (
            f'<div style="margin: {"10px" if is_user else "25px"} 0; '
            f'padding: 12px; background-color: {bg_color}; '
            f'border-radius: 8px; border: 1px solid #E0E0E0;">'
        )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
        if not performance_info:
            message_html += (
                f'<div style="font-weight: bold; color: {color}; '
                f'margin-bottom: 8px;"><br>{sender}</div>'
            )
        else:
            message_html += (
                f'<div style="font-weight: bold; color: {color}; '
                f'margin-bottom: 8px;"><br></div>'
            )

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if text.strip():
            message_html += (
                f'<div style="white-space: pre-wrap; margin-left: 10px;">'
                f'{text.strip()}</div>'
            )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if not is_user and performance_info:
            tokens_per_sec = performance_info.get("tokens", 0) / max(
                performance_info.get("total_time", 1), 0.1
            )
            message_html += (
                f'<div style="margin-top: 10px; padding: 5px; '
                f'background-color: #FAFAFA; border-top: 1px solid #E0E0E0; '
                f'font-size: 12px; color: #757575;">'
                f'‚ö° –í—Ä–µ–º—è: {performance_info.get("total_time", 0):.2f}—Å | '
                f'üîÑ –¢–æ–∫–µ–Ω–æ–≤: {performance_info.get("tokens", 0)} '
                f'({tokens_per_sec:.1f} —Ç/—Å) | '
                f'‚öôÔ∏è –ú–æ–¥–µ–ª—å: {performance_info.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}'
                f'</div>'
            )

        message_html += '</div>'
        self._insert_message_safely(message_html)
        # log_prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if is_user else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        # logging.info(f"{log_prefix} message_html: {message_html}")

    def add_message_chunk(self, chunk: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        # logging.info(
        #     f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {chunk}, is_system_message: {self.is_system_message}")
        if not chunk or self.is_system_message:
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
        if self.response_start_pos is None:
            self.response_start_pos = self.textCursor().position()
            self.current_message_html = (
                '<div style="margin: 25px 0; padding: 12px; '
                'background-color: #FFFFFF; border-radius: 8px; '
                'border: 1px solid #E0E0E0;">'
                '<div style="white-space: pre-wrap; margin-left: 10px;">'
            )
            self._insert_message_safely(self.current_message_html)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —á–∞–Ω–∫–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if chunk and not chunk.startswith(' ') and not self.current_message_html.endswith(' '):
            chunk = ' ' + chunk

        # –í—Å—Ç–∞–≤–ª—è–µ–º —á–∞–Ω–∫
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        cursor.insertText(chunk)
        self._scroll_to_bottom()

    def _insert_message_safely(self, html: str):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ HTML –≤ —á–∞—Ç
        """
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        cursor.insertHtml(html)
        self._scroll_to_bottom()

    def _scroll_to_bottom(self):
        """
        –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑
        """
        scrollbar = self.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        QApplication.processEvents()

    def finish_chunked_message(self):
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if self.response_start_pos is not None:
            self.current_message_html += '</div></div>'
            cursor = self.textCursor()
            cursor.movePosition(cursor.MoveOperation.End)
            cursor.insertHtml('</div></div>')
            self.response_start_pos = None
            self.current_message_html = ""


class ModelSettings(QFrame):
    """–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        layout = QVBoxLayout(self)
        layout.setSpacing(10)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        container = QWidget()
        settings_layout = QVBoxLayout(container)
        settings_layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
        header.setStyleSheet("font-weight: bold; font-size: 14px;")
        settings_layout.addWidget(header)

        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        basic_group = QGroupBox("–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        basic_layout = QFormLayout()

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        self.temp_spin = QDoubleSpinBox()
        self.temp_spin.setRange(0.0, 2.0)
        self.temp_spin.setSingleStep(0.1)
        self.temp_spin.setValue(0.7)
        self.temp_spin.setToolTip(
            "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0 - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, 2.0 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω–∞—è)")
        basic_layout.addRow("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", self.temp_spin)

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        self.tokens_spin = QSpinBox()
        self.tokens_spin.setRange(1, 4096)
        self.tokens_spin.setValue(2048)
        self.tokens_spin.setToolTip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
        basic_layout.addRow("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:", self.tokens_spin)

        basic_group.setLayout(basic_layout)
        settings_layout.addWidget(basic_group)

        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        advanced_group = QGroupBox("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        advanced_layout = QFormLayout()

        # Top-K
        self.top_k_spin = QSpinBox()
        self.top_k_spin.setRange(1, 100)
        self.top_k_spin.setValue(40)
        self.top_k_spin.setToolTip(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)")
        advanced_layout.addRow("Top-K:", self.top_k_spin)

        # Top-P
        self.top_p_spin = QDoubleSpinBox()
        self.top_p_spin.setRange(0.0, 1.0)
        self.top_p_spin.setSingleStep(0.05)
        self.top_p_spin.setValue(0.9)
        self.top_p_spin.setToolTip(
            "–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)")
        advanced_layout.addRow("Top-P:", self.top_p_spin)

        # Repeat Penalty
        self.repeat_penalty_spin = QDoubleSpinBox()
        self.repeat_penalty_spin.setRange(1.0, 2.0)
        self.repeat_penalty_spin.setSingleStep(0.1)
        self.repeat_penalty_spin.setValue(1.1)
        self.repeat_penalty_spin.setToolTip(
            "–®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)")
        advanced_layout.addRow("Repeat Penalty:", self.repeat_penalty_spin)

        # Presence Penalty
        self.presence_penalty_spin = QDoubleSpinBox()
        self.presence_penalty_spin.setRange(-2.0, 2.0)
        self.presence_penalty_spin.setSingleStep(0.1)
        self.presence_penalty_spin.setValue(0.0)
        self.presence_penalty_spin.setToolTip("–®—Ç—Ä–∞—Ñ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        advanced_layout.addRow("Presence Penalty:", self.presence_penalty_spin)

        # Frequency Penalty
        self.frequency_penalty_spin = QDoubleSpinBox()
        self.frequency_penalty_spin.setRange(-2.0, 2.0)
        self.frequency_penalty_spin.setSingleStep(0.1)
        self.frequency_penalty_spin.setValue(0.0)
        self.frequency_penalty_spin.setToolTip("–®—Ç—Ä–∞—Ñ –∑–∞ —á–∞—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
        advanced_layout.addRow("Frequency Penalty:", self.frequency_penalty_spin)

        # TFS-Z
        self.tfs_z_spin = QDoubleSpinBox()
        self.tfs_z_spin.setRange(0.0, 2.0)
        self.tfs_z_spin.setSingleStep(0.1)
        self.tfs_z_spin.setValue(1.0)
        self.tfs_z_spin.setToolTip("–ü–∞—Ä–∞–º–µ—Ç—Ä —Ö–≤–æ—Å—Ç–æ–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        advanced_layout.addRow("TFS-Z:", self.tfs_z_spin)

        advanced_group.setLayout(advanced_layout)
        settings_layout.addWidget(advanced_group)

        # Mirostat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        mirostat_group = QGroupBox("Mirostat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        mirostat_layout = QFormLayout()

        # Mirostat mode
        self.mirostat_spin = QSpinBox()
        self.mirostat_spin.setRange(0, 2)
        self.mirostat_spin.setValue(0)
        self.mirostat_spin.setToolTip("–†–µ–∂–∏–º Mirostat (0 - –≤—ã–∫–ª, 1 - v1, 2 - v2)")
        mirostat_layout.addRow("Mirostat —Ä–µ–∂–∏–º:", self.mirostat_spin)

        # Mirostat tau
        self.mirostat_tau_spin = QDoubleSpinBox()
        self.mirostat_tau_spin.setRange(0.0, 10.0)
        self.mirostat_tau_spin.setSingleStep(0.1)
        self.mirostat_tau_spin.setValue(5.0)
        self.mirostat_tau_spin.setToolTip("–¶–µ–ª–µ–≤–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è Mirostat")
        mirostat_layout.addRow("Mirostat tau:", self.mirostat_tau_spin)

        # Mirostat eta
        self.mirostat_eta_spin = QDoubleSpinBox()
        self.mirostat_eta_spin.setRange(0.0, 1.0)
        self.mirostat_eta_spin.setSingleStep(0.01)
        self.mirostat_eta_spin.setValue(0.1)
        self.mirostat_eta_spin.setToolTip("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è Mirostat")
        mirostat_layout.addRow("Mirostat eta:", self.mirostat_eta_spin)

        mirostat_group.setLayout(mirostat_layout)
        settings_layout.addWidget(mirostat_group)

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_group = QGroupBox("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        system_layout = QVBoxLayout()
        self.system_prompt = QTextEdit()
        self.system_prompt.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç...")
        self.system_prompt.setMaximumHeight(100)
        system_layout.addWidget(self.system_prompt)
        system_group.setLayout(system_layout)
        settings_layout.addWidget(system_group)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
        settings_layout.addStretch()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å–∫—Ä–æ–ª–ª
        scroll.setWidget(container)
        layout.addWidget(scroll)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.setStyleSheet("""
            QGroupBox {
                background-color: #FFFFFF;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
                margin-top: 12px;
                padding-top: 16px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 4px 8px;
                background-color: #F5F5F5;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
            }
            QSpinBox, QDoubleSpinBox {
                padding: 4px;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
            }
            QSpinBox:hover, QDoubleSpinBox:hover {
                border-color: #2196F3;
            }
            QSpinBox:focus, QDoubleSpinBox:focus {
                border-color: #2196F3;
                background-color: #E3F2FD;
            }
            QTextEdit {
                border: 1px solid #E0E0E0;
                border-radius: 4px;
                padding: 4px;
            }
            QTextEdit:focus {
                border-color: #2196F3;
                background-color: #E3F2FD;
            }
            QLabel[tooltip] {
                color: #757575;
                font-style: italic;
            }
        """)

    def get_parameters(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
        return {
            'temperature': self.temp_spin.value(),
            'max_tokens': self.tokens_spin.value(),
            'top_k': self.top_k_spin.value(),
            'top_p': self.top_p_spin.value(),
            'repeat_penalty': self.repeat_penalty_spin.value(),
            'presence_penalty': self.presence_penalty_spin.value(),
            'frequency_penalty': self.frequency_penalty_spin.value(),
            'tfs_z': self.tfs_z_spin.value(),
            'mirostat': self.mirostat_spin.value(),
            'mirostat_tau': self.mirostat_tau_spin.value(),
            'mirostat_eta': self.mirostat_eta_spin.value(),
            'system': self.system_prompt.toPlainText().strip()
        }


class ModelThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é"""
    operation_complete = pyqtSignal(bool, str)  # –°–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)

    def __init__(self, api, operation, model_name):
        super().__init__()
        self.api = api
        self.operation = operation  # 'start' –∏–ª–∏ 'stop'
        self.model_name = model_name

    def run(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if self.operation == 'start':
                success = self.api.run_model(self.model_name)
                if success:
                    self.operation_complete.emit(True, "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
                else:
                    self.operation_complete.emit(False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å")
            elif self.operation == 'stop':
                success = self.api.stop_model(self.model_name)
                if success:
                    self.operation_complete.emit(True, "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    self.operation_complete.emit(False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
        except Exception as e:
            self.operation_complete.emit(False, str(e))


class MessageThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_chunk = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞
    finished = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    error = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –æ–± –æ—à–∏–±–∫–µ

    def __init__(self, api, model, prompt, system, **kwargs):
        super().__init__()
        self.api = api
        self.model = model
        self.prompt = prompt
        self.system = system
        self.kwargs = kwargs  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    def run(self):
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞–Ω–∫–æ–≤
            for chunk in self.api.generate_stream(
                    model=self.model,
                    prompt=self.prompt,
                    system=self.system,
                    **self.kwargs  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            ):
                if chunk:
                    self.message_chunk.emit(chunk)
            self.finished.emit()
        except Exception as e:
            self.error.emit(str(e))

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if not hasattr(self, 'initialization_complete') or not self.initialization_complete:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            event.ignore()
            return

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...")
            self.api.stop_all_models()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'update_timer') and self.update_timer is not None:
                self.update_timer.stop()

            # –û—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫–∏
            if hasattr(self, 'model_thread') and self.model_thread is not None:
                self.model_thread.quit()
                self.model_thread.wait()
                self.model_thread = None

            if hasattr(self, 'message_thread') and self.message_thread is not None:
                self.message_thread.quit()
                self.message_thread.wait()
                self.message_thread = None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

        event.accept()


class ChatWindow(QMainWindow):
    settings_requested = pyqtSignal()

    def __init__(self):
        self.logger = logging.getLogger('OllamaAPI')
        self.message_thread = None
        self.total_tokens = None
        self.generation_start_time = None
        try:
            super().__init__(None)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞
            self.setWindowFlags(
                Qt.WindowType.Window |
                Qt.WindowType.WindowMinMaxButtonsHint |
                Qt.WindowType.WindowCloseButtonHint
            )

            # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.setWindowTitle("Ollama Chat")
            self.resize(1200, 800)
            self.setMinimumSize(800, 600)

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            screen = QApplication.primaryScreen().geometry()
            self.setGeometry(
                (screen.width() - 1200) // 2,
                (screen.height() - 800) // 2,
                1200, 800
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            self.api = OllamaAPI()
            self.current_model = None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            is_available, version = self.api.is_available()
            if not is_available:
                raise Exception(f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {version}")
            logging.info(f"API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {version})")

            # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
            central_widget = QWidget(self)
            self.setCentralWidget(central_widget)

            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π layout
            main_layout = QHBoxLayout()
            central_widget.setLayout(main_layout)
            main_layout.setContentsMargins(0, 0, 0, 0)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è layout
            QApplication.processEvents()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if not self.isVisible():
                self.show()
                self.raise_()
                self.activateWindow()
                QApplication.processEvents()

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self.initialization_complete = False

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._initialize_interface(main_layout)

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            self.initialization_complete = True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞: {str(e)}", exc_info=True)
            raise

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if not hasattr(self, 'initialization_complete') or not self.initialization_complete:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            event.ignore()
            return

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...")
            self.api.stop_all_models()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'update_timer'):
                self.update_timer.stop()

            # –û—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫–∏
            if hasattr(self, 'model_thread'):
                self.model_thread.quit()
                self.model_thread.wait()

            if hasattr(self, 'message_thread'):
                self.message_thread.quit()
                self.message_thread.wait()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")

        event.accept()

    def _initialize_interface(self, main_layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
            splitter = QSplitter(Qt.Orientation.Horizontal)
            main_layout.addWidget(splitter)

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
            left_panel = QWidget()
            left_layout = QVBoxLayout(left_panel)
            left_layout.setContentsMargins(10, 10, 10, 10)

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            model_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:")
            self.model_combo = QComboBox()
            self.model_combo.addItem("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            left_layout.addWidget(model_label)
            left_layout.addWidget(self.model_combo)

            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            self.model_status = QLabel("–°—Ç–∞—Ç—É—Å: –ù–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.model_status.setStyleSheet("""
                QLabel {
                    color: #757575;
                    margin-top: 5px;
                    padding: 5px;
                    border-radius: 4px;
                    background-color: #F5F5F5;
                }
            """)
            left_layout.addWidget(self.model_status)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é
            model_controls = QHBoxLayout()
            self.start_model_btn = QPushButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å")
            self.start_model_btn.clicked.connect(self.start_model)
            self.start_model_btn.setEnabled(False)
            self.start_model_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                }
                QPushButton:hover { background-color: #45a049; }
                QPushButton:pressed { background-color: #3d8b40; }
                QPushButton:disabled { background-color: #BDBDBD; }
            """)
            model_controls.addWidget(self.start_model_btn)

            self.stop_model_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.stop_model_btn.clicked.connect(self.stop_model)
            self.stop_model_btn.setEnabled(False)
            self.stop_model_btn.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                }
                QPushButton:hover { background-color: #da190b; }
                QPushButton:pressed { background-color: #d32f2f; }
                QPushButton:disabled { background-color: #BDBDBD; }
            """)
            model_controls.addWidget(self.stop_model_btn)

            left_layout.addLayout(model_controls)

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_layout = QHBoxLayout()

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
            model_settings_btn = QPushButton("‚öô –ú–æ–¥–µ–ª—å")
            model_settings_btn.clicked.connect(self._toggle_model_settings)
            model_settings_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #1976D2; }
                QPushButton:pressed { background-color: #1565C0; }
            """)
            settings_layout.addWidget(model_settings_btn)

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama
            ollama_settings_btn = QPushButton("‚öô Ollama")
            ollama_settings_btn.clicked.connect(self._show_ollama_settings)
            ollama_settings_btn.setStyleSheet("""
                QPushButton {
                    background-color: #673AB7;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #5E35B1; }
                QPushButton:pressed { background-color: #512DA8; }
            """)
            settings_layout.addWidget(ollama_settings_btn)

            left_layout.addLayout(settings_layout)

            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LmStudio
            lmstudio_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LmStudio")
            lmstudio_layout = QVBoxLayout()

            self.lmstudio_btn = QPushButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LmStudio")
            self.lmstudio_btn.setToolTip("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LmStudio –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏")
            self.lmstudio_btn.clicked.connect(self.show_lmstudio_settings)

            lmstudio_layout.addWidget(self.lmstudio_btn)
            lmstudio_group.setLayout(lmstudio_layout)
            settings_layout.addWidget(lmstudio_group)  # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ layout

            left_layout.addStretch()

            left_panel.setMinimumWidth(200)
            left_panel.setMaximumWidth(300)
            splitter.addWidget(left_panel)

            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (—á–∞—Ç)
            chat_panel = QWidget()
            chat_layout = QVBoxLayout(chat_panel)
            chat_layout.setContentsMargins(10, 10, 10, 10)

            self.chat_history = ChatHistory()
            chat_layout.addWidget(self.chat_history)

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            input_layout = QHBoxLayout()
            input_layout.setSpacing(10)

            self.message_input = QTextEdit()
            self.message_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            self.message_input.setMaximumHeight(100)
            self.message_input.setStyleSheet("""
                QTextEdit {
                    background-color: white;
                    border: 1px solid #E0E0E0;
                    border-radius: 4px;
                    padding: 8px;
                    font-family: 'Segoe UI', Arial, sans-serif;
                    font-size: 14px;
                    line-height: 1.4;
                }
                QTextEdit:focus {
                    border-color: #2962FF;
                }
            """)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏—à–∏ Enter
            self.message_input.installEventFilter(self)

            send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
            send_button.setObjectName("send_button")  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            send_button.setMinimumWidth(100)
            send_button.setEnabled(False)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            send_button.setStyleSheet("""
                QPushButton {
                    background-color: #2962FF;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px 16px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #1E88E5;
                }
                QPushButton:pressed {
                    background-color: #1565C0;
                }
                QPushButton:disabled {
                    background-color: #BDBDBD;
                }
            """)
            send_button.clicked.connect(self.send_message)

            input_layout.addWidget(self.message_input)
            input_layout.addWidget(send_button)
            chat_layout.addLayout(input_layout)

            splitter.addWidget(chat_panel)

            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            self.model_settings = ModelSettings()
            self.model_settings.setMinimumWidth(250)
            self.model_settings.setMaximumWidth(350)
            splitter.addWidget(self.model_settings)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞
            splitter.setStretchFactor(0, 0)  # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
            splitter.setStretchFactor(1, 1)  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
            splitter.setStretchFactor(2, 0)  # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.model_combo.currentTextChanged.connect(self.on_model_changed)

            # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            self.update_timer = QTimer()
            self.update_timer.timeout.connect(self.update_models)
            self.update_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

            # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
            self.update_models()

        except Exception as ui_error:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(ui_error)}")
            raise

    def update_models(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        if not hasattr(self, 'initialization_complete') or not self.initialization_complete:
            logging.warning("–ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            current = self.model_combo.currentText().split(" (")[
                0] if self.model_combo.currentText() else None

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models = self.api.get_models()
            if not isinstance(models, list):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            new_models = set(
                model['name'] for model in models if isinstance(model, dict) and 'name' in model)
            current_models = set(self.model_combo.itemText(i).split(" (")[0]
                                 for i in range(self.model_combo.count()))

            if new_models == current_models and current in new_models:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.model_combo.blockSignals(True)

            try:
                # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                self.model_combo.clear()

                if not models:
                    self.model_combo.addItem("–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                    self.update_model_status("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π", True)
                    self.current_model = None
                    self.start_model_btn.setEnabled(False)
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–æ–∫
                for model in models:
                    if not isinstance(model, dict) or 'name' not in model:
                        continue

                    name = model.get('name', '')
                    size = model.get('size', '–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

                    if not name:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
                    is_running = self.api.is_model_running(name)
                    status = " (–ó–∞–ø—É—â–µ–Ω–∞)" if is_running else ""

                    self.model_combo.addItem(f"{name}{status} ({size})")

                    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
                    if is_running:
                        self.api.running_models.add(name)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
                if current and current in new_models:
                    index = self.model_combo.findText(current, Qt.MatchFlag.MatchStartsWith)
                    if index >= 0:
                        self.model_combo.setCurrentIndex(index)
                        self.current_model = current
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
                        if self.api.is_model_running(current):
                            self.update_model_status(f"–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞: {current}")
                            self.start_model_btn.setEnabled(False)
                            self.stop_model_btn.setEnabled(True)
                            self.model_combo.setEnabled(False)
                        else:
                            self.update_model_status(f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {current}")
                            self.start_model_btn.setEnabled(True)
                            self.stop_model_btn.setEnabled(False)
                        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {current}")
                elif self.model_combo.count() > 0:
                    self.model_combo.setCurrentIndex(0)
                    self.current_model = self.model_combo.currentText().split(" (")[0]
                    logging.info(
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å: {self.current_model}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏
                    if self.api.is_model_running(self.current_model):
                        self.update_model_status(f"–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞: {self.current_model}")
                        self.start_model_btn.setEnabled(False)
                        self.stop_model_btn.setEnabled(True)
                        self.model_combo.setEnabled(False)
                    else:
                        self.update_model_status(f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {self.current_model}")
                        self.start_model_btn.setEnabled(True)
                        self.stop_model_btn.setEnabled(False)

            finally:
                self.model_combo.blockSignals(False)
                self.model_combo.setEnabled(True)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
            self.model_combo.clear()
            self.model_combo.addItem(f"–û—à–∏–±–∫–∞: {str(e)}")
            self.update_model_status("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", True)
            self.current_model = None
            self.start_model_btn.setEnabled(False)

    def show_lmstudio_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ LMStudio"""
        try:
            settings_dialog = LmStudioSettings(self)
            settings_dialog.show()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏", str(e), exc_info=True)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏")

    def update_model_status(self, status: str, is_error: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        color = "#D32F2F" if is_error else "#2E7D32"
        self.model_status.setText(f"–°—Ç–∞—Ç—É—Å: {status}")
        self.model_status.setStyleSheet(f"color: {color}; margin-top: 5px;")

    def _update_buttons_state(self, is_running: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if is_running:
            # –ú–æ–¥–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞
            self.start_model_btn.setEnabled(False)
            self.stop_model_btn.setEnabled(True)
            self.model_combo.setEnabled(True)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–º–µ–Ω—É –º–æ–¥–µ–ª–∏ –Ω–∞ –ª–µ—Ç—É
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_button = self.findChild(QPushButton, "send_button")
            if send_button:
                send_button.setEnabled(True)
        else:
            # –ú–æ–¥–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            self.start_model_btn.setEnabled(True)
            self.stop_model_btn.setEnabled(False)
            self.model_combo.setEnabled(True)
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_button = self.findChild(QPushButton, "send_button")
            if send_button:
                send_button.setEnabled(False)

    def check_model_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if not self.current_model:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_button = self.findChild(QPushButton, "send_button")
            if send_button:
                send_button.setEnabled(False)
                QApplication.processEvents()
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å
            is_running = self.api.is_model_running(self.current_model)

            if is_running:
                self.chat_history.add_system_message(f"‚úÖ –ú–æ–¥–µ–ª—å {self.current_model} –∞–∫—Ç–∏–≤–Ω–∞")
                self.update_model_status(f"–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞: {self.current_model}")
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_button = self.findChild(QPushButton, "send_button")
                if send_button:
                    send_button.setEnabled(True)
                    QApplication.processEvents()
                self._update_buttons_state(True)
                return True
            else:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                success = self.api.run_model(self.current_model)
                if success:
                    self.chat_history.add_system_message(
                        f"‚úÖ –ú–æ–¥–µ–ª—å {self.current_model} –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    self.update_model_status(f"–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞: {self.current_model}")
                    send_button = self.findChild(QPushButton, "send_button")
                    if send_button:
                        send_button.setEnabled(True)
                        QApplication.processEvents()
                    self._update_buttons_state(True)
                    return True
                else:
                    self.chat_history.add_system_message(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å {self.current_model}")
                    self.update_model_status(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏", True)
                    self._update_buttons_state(False)
                    return False

        except Exception as e:
            error_msg = str(e)
            self.chat_history.add_system_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–∏: {error_msg}")
            self.update_model_status(f"–û—à–∏–±–∫–∞: {error_msg[:50]}...", True)
            self._update_buttons_state(False)
            return False

    def on_model_changed(self, model_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"""
        try:
            if not model_text or "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π" in model_text or "–û—à–∏–±–∫–∞:" in model_text:
                self.current_model = None
                self.update_model_status("–ù–µ –≤—ã–±—Ä–∞–Ω–∞", True)
                self.chat_history.add_system_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                self._update_buttons_state(False)
                return

            try:
                self.current_model = model_text.split(" (")[0]
                if not self.current_model:
                    raise ValueError("–ü—É—Å—Ç–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏")
                logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.current_model}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
                self.current_model = None
                self.update_model_status("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏", True)
                self._update_buttons_state(False)
                return

            self.chat_history.add_system_message(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏: {self.current_model}")
            self.update_model_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...")

            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.start_model_btn.setEnabled(False)
            self.stop_model_btn.setEnabled(False)

            if self.check_model_availability():
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ check_model_availability
                pass
            else:
                self.chat_history.add_system_message(
                    "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω\n"
                    "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama\n"
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
                    "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª Ollama –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"
                )
                self._update_buttons_state(False)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏: {str(e)}")
            self.update_model_status("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏", True)
            self._update_buttons_state(False)

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.current_model:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å")
            return
        text = self.message_input.toPlainText().strip()
        if not text:
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {self.current_model}")
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_input.setReadOnly(True)
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(False)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_history.add_message(text, True)
        self.message_input.clear()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_model_status(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            params = self.model_settings.get_parameters()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.generation_start_time = time.time()
            self.total_tokens = 0
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_thread = MessageThread(
                self.api,
                self.current_model,
                text,
                params.pop('system'),  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                **params  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            )
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.message_thread.message_chunk.connect(self.on_message_chunk)
            self.message_thread.finished.connect(self.on_message_complete)
            self.message_thread.error.connect(self.on_message_error)
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            self.message_thread.start()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.on_message_error(str(e))

    def on_message_chunk(self, chunk: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏"""
        self.chat_history.add_message_chunk(chunk)
        self.total_tokens += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤

    def on_message_complete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        total_time = time.time() - self.generation_start_time
        performance_info = {
            'total_time': total_time,
            'tokens': self.total_tokens,
            'model': self.current_model
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_thread.performance_info = performance_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –í–ê–ñ–ù–û: —ç—Ç–∞ —á–∞—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.chat_history.add_message("", False, performance_info)

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.message_input.setReadOnly(False)
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(True)
        self.update_model_status(f"–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: {self.current_model}")

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫
        if hasattr(self, 'message_thread'):
            self.message_thread.deleteLater()
            self.message_thread = None

    def on_message_error(self, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {error_msg}")
        self.update_model_status(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", True)
        self.chat_history.add_message(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", False)

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.message_input.setReadOnly(False)
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        if not self.check_model_availability():
            self.chat_history.add_message(
                "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Ollama\n"
                "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å\n"
                "3. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å",
                False
            )

    def start_model(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏"""
        if not self.current_model:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å")
            return

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        self.start_model_btn.setEnabled(False)
        self.model_combo.setEnabled(False)

        try:
            logging.info(f"–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏: {self.current_model}")
            self.chat_history.add_message(
                f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ {self.current_model}...\n"
                "‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (30-60 —Å–µ–∫—É–Ω–¥).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", False)
            self.update_model_status("–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            self.model_thread = ModelThread(self.api, 'start', self.current_model)
            self.model_thread.operation_complete.connect(self.on_model_operation_complete)
            self.model_thread.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            self.loading_timer = QTimer()
            self.loading_dots = 0
            self.loading_timer.timeout.connect(self.update_loading_status)
            self.loading_timer.start(500)  # –ö–∞–∂–¥—ã–µ 500 –º—Å

        except Exception as e:
            error_msg = str(e)
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏: {error_msg}")
            self.update_model_status("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", True)
            self.chat_history.add_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏: {error_msg}", False)
            self.start_model_btn.setEnabled(True)
            self.stop_model_btn.setEnabled(False)
            self.model_combo.setEnabled(True)

    def update_loading_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_dots = (self.loading_dots + 1) % 4
        dots = "." * self.loading_dots
        self.update_model_status(f"–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏{dots}")

    def on_model_operation_complete(self, success: bool, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if hasattr(self, 'loading_timer') and self.loading_timer.isActive():
            self.loading_timer.stop()

        if success:
            if "–∑–∞–ø—É—â–µ–Ω–∞" in message:
                self.update_model_status(f"–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞: {self.current_model}")
                self.chat_history.add_message("‚úÖ " + message, False)
                self.stop_model_btn.setEnabled(True)
                self.start_model_btn.setEnabled(False)
                self.model_combo.setEnabled(False)
                logging.info(f"–ú–æ–¥–µ–ª—å {self.current_model} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
            else:  # –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                self.update_model_status(f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {self.current_model}")
                self.chat_history.add_message("‚úÖ " + message, False)
                self.start_model_btn.setEnabled(True)
                self.stop_model_btn.setEnabled(False)
                self.model_combo.setEnabled(True)
                logging.info(f"–ú–æ–¥–µ–ª—å {self.current_model} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            error_msg = message
            if "–∑–∞–ø—É—Å–∫" in self.model_status.text().lower():
                self.update_model_status("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", True)
                self.start_model_btn.setEnabled(True)
                self.stop_model_btn.setEnabled(False)
                self.model_combo.setEnabled(True)
            else:
                self.update_model_status("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", True)
                self.stop_model_btn.setEnabled(True)
                self.model_combo.setEnabled(False)
            self.chat_history.add_message(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", False)
            logging.error(f"–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é: {error_msg}")

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫
        if hasattr(self, 'model_thread'):
            self.model_thread.operation_complete.disconnect()
            self.model_thread = None

    def stop_model(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏"""
        if not self.current_model:
            return

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_model_btn.setEnabled(False)
        self.start_model_btn.setEnabled(False)

        try:
            logging.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏: {self.current_model}")
            self.chat_history.add_message(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ {self.current_model}...", False)
            self.update_model_status("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏...")

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            self.model_thread = ModelThread(self.api, 'stop', self.current_model)
            self.model_thread.operation_complete.connect(self.on_model_operation_complete)
            self.model_thread.start()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
            if self.current_model in self.api.running_models:
                self.api.running_models.remove(self.current_model)

        except Exception as e:
            error_msg = str(e)
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {error_msg}")
            self.update_model_status("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", True)
            self.chat_history.add_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {error_msg}", False)
            self.stop_model_btn.setEnabled(True)
            self.model_combo.setEnabled(False)

    def _toggle_model_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏"""
        if self.model_settings.isVisible():
            self.model_settings.hide()
        else:
            self.model_settings.show()

    def _show_ollama_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama"""
        try:
            settings_dialog = OllamaSettings(self)
            settings_dialog.show()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º show() –≤–º–µ—Å—Ç–æ exec()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")

    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            self.chat_history.clear()

    def eventFilter(self, obj, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        if obj is self.message_input and event.type() == event.Type.KeyPress:
            if event.key() == Qt.Key.Key_Return or event.key() == Qt.Key.Key_Enter:
                if event.modifiers() == Qt.KeyboardModifier.ShiftModifier:
                    # Shift+Enter - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                    return False
                else:
                    # Enter - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.send_message()
                    return True
        return super().eventFilter(obj, event)
