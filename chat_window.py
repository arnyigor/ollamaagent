import logging
import sys
import time

from PyQt6.QtCore import Qt, pyqtSignal, QTimer

from ui_settings import TEXT_EDIT_STYLE, MESSAGE_WIDGET_STYLE, MODEL_SETTINGS_STYLE
from workers import ModelThread, MessageThread
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTextEdit, QComboBox, QLabel,
    QSplitter, QFrame, QScrollArea, QSpinBox, QDoubleSpinBox,
    QMessageBox, QGroupBox, QFormLayout, QCheckBox, QDialog
)

from jan_settings import JanSettingsWindow
from ollama_api import OllamaAPI
from ollama_settings import OllamaSettings
from widgets.model_settings import ModelSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)


class MessageWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""

    def __init__(self, text: str, is_user: bool = False, parent=None):
        super().__init__(parent)
        self.setFrameStyle(QFrame.Shape.StyledPanel | QFrame.Shadow.Raised)

        layout = QVBoxLayout(self)
        layout.setSpacing(5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (User/Assistant)
        # header = QLabel("–í—ã" if is_user else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        # header.setStyleSheet(
        #     "font-weight: bold; color: #2962FF;" if is_user else "font-weight: bold; color: #00838F;")
        # layout.addWidget(header)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ QTextEdit
        message = QTextEdit()
        message.setReadOnly(True)
        message.setPlainText(text)
        message.setFrameStyle(QFrame.Shape.NoFrame)
        message.setStyleSheet(TEXT_EDIT_STYLE)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
        doc_height = message.document().size().height()
        message.setFixedHeight(int(min(doc_height + 20, 400)))
        message.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        layout.addWidget(message)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞
        self.setStyleSheet(MESSAGE_WIDGET_STYLE)


class ChatHistory(QTextEdit):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setReadOnly(True)
        self.response_start_pos = None
        self.current_message_html = ""
        self.is_system_message = False

    def add_system_message(self, text: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –∑–∞–ø—É—Å–∫–µ –º–æ–¥–µ–ª–∏)
        """
        self.is_system_message = True
        message_html = (
            f'<div style="margin: 10px 0; padding: 8px; '
            f'background-color: #E3F2FD; border-radius: 8px; '
            f'color: #1565C0; font-style: italic;">{text}</div>'
        )
        self._insert_message_safely(message_html)
        self.is_system_message = False

    def add_message(self, text: str, is_user: bool = False, performance_info: dict = None):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
        """
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not is_user:
            return

        if not text.strip():
            return

        sender = "–í—ã"
        color = "#2962FF"
        bg_color = "#F5F5F5"

        message_html = (
            f'<div style="margin: 10px 0; padding: 12px; background-color: {bg_color}; '
            f'border-radius: 8px; border: 1px solid #E0E0E0;">'
            f'<div style="font-weight: bold; color: {color}; margin-bottom: 8px;"><br>{sender}</div>'
            f'<div style="white-space: pre-wrap; margin-left: 10px;">{text.strip()}<br></div>'
            f'</div>'
        )
        self._insert_message_safely(message_html)

    def add_performance_info(self, performance_info: dict):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not performance_info:
            return

        tokens_per_sec = performance_info.get("tokens", 0) / max(
            performance_info.get("total_time", 1), 0.1
        )
        info_html = (
            f'<div style="margin-top: 15px; margin-left: 25px; padding: 8px; background-color: #FFFFFF; '
            f'border-radius: 6px; border: 1px solid #E0E0E0; font-size: 12px; color: #757575;">'
            f'‚ö° –í—Ä–µ–º—è: {performance_info.get("total_time", 0):.2f}—Å | '
            f'üîÑ –¢–æ–∫–µ–Ω–æ–≤: {performance_info.get("tokens", 0)} '
            f'({tokens_per_sec:.1f} —Ç/—Å) | '
            f'‚öôÔ∏è –ú–æ–¥–µ–ª—å: {performance_info.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}'
            f'</div>'
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        cursor.insertText('\n')
        self._insert_message_safely(info_html)
        # log_prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if is_user else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        # logging.info(f"{log_prefix} message_html: {message_html}")

    def add_extended_performance_info(self, stats: dict):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        if not stats:
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        output_tokens = stats.get("output_tokens", 0)
        total_time = stats.get("total_time", 1)
        tokens_per_sec = output_tokens / max(total_time, 0.1)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        ttft = stats.get("time_to_first_token", 0)

        info_html = (
            f'<div style="margin-top: 15px; margin-left: 25px; padding: 10px; background-color: #E8F5E8; '
            f'border-radius: 8px; border: 1px solid #4CAF50; font-size: 12px; color: #2E7D32;">'
            f'üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b><br>'
            f'‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å | '
            f'‚ö° TTFT: {ttft:.3f}—Å | '
            f'üì• –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats.get("input_tokens", 0)} | '
            f'üì§ –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {output_tokens} | '
            f'üîÑ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get("total_tokens", 0)} | '
            f'‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {tokens_per_sec:.1f} —Ç/—Å | '
            f'üß† –ü–∞–º—è—Ç—å: {stats.get("memory_used", 0):.1f}MB | '
            f'‚öôÔ∏è –ú–æ–¥–µ–ª—å: {stats.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}'
            f'</div>'
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        cursor.insertText('\n')
        self._insert_message_safely(info_html)

    def add_message_chunk(self, chunk: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        if not chunk or self.is_system_message:
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
        if self.response_start_pos is None:
            self.response_start_pos = self.textCursor().position()
            self.current_message_text = ""

        # –í—Å—Ç–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —á–∞–Ω–∫ –∫–∞–∫ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if chunk == '':
            self.finish_chunked_message()
            return
            
        cursor.insertText(chunk)
        self.current_message_text += chunk
        self._scroll_to_bottom()

    def _insert_message_safely(self, html: str):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ HTML –≤ —á–∞—Ç
        """
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        cursor.insertHtml(html)
        self._scroll_to_bottom()

    def _scroll_to_bottom(self):
        """
        –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑
        """
        scrollbar = self.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        QApplication.processEvents()

    def finish_chunked_message(self):
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if self.response_start_pos is not None:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor = self.textCursor()
            cursor.movePosition(cursor.MoveOperation.End)
            cursor.insertText('\n')
            self._scroll_to_bottom()
            self.response_start_pos = None
            self.current_message_text = ""





class ChatWindow(QMainWindow):
    settings_requested = pyqtSignal()

    def __init__(self):
        self.message_thread = None
        self.messages = []
        self.current_response = ""
        self.total_tokens = 0
        self.generation_start_time = None
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        self.session_stats = {
            'total_input_tokens': 0,
            'total_output_tokens': 0,
            'total_generations': 0,
            'total_time': 0.0
        }
        try:
            super().__init__(None)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∫–Ω–∞
            self.setWindowFlags(
                Qt.WindowType.Window |
                Qt.WindowType.WindowMinMaxButtonsHint |
                Qt.WindowType.WindowCloseButtonHint
            )

            # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.setWindowTitle("Ollama Chat")
            self.resize(1200, 800)
            self.setMinimumSize(800, 600)

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            screen = QApplication.primaryScreen().geometry()
            self.setGeometry(
                (screen.width() - 1200) // 2,
                (screen.height() - 800) // 2,
                1200, 800
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
            self.api = OllamaAPI()
            self.current_model = None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            is_available, version = self.api.is_available()
            if not is_available:
                raise Exception(f"Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {version}")
            logging.info(f"API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {version})")

            # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
            central_widget = QWidget(self)
            self.setCentralWidget(central_widget)

            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π layout
            main_layout = QHBoxLayout()
            central_widget.setLayout(main_layout)
            main_layout.setContentsMargins(0, 0, 0, 0)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è layout
            QApplication.processEvents()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if not self.isVisible():
                self.show()
                self.raise_()
                self.activateWindow()
                QApplication.processEvents()

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self.initialization_complete = False

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._initialize_interface(main_layout)

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            self.initialization_complete = True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞: {str(e)}", exc_info=True)
            raise

    def closeEvent(self, a0):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            if not hasattr(self, 'initialization_complete') or not self.initialization_complete:
                logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                if hasattr(a0, 'ignore'):
                    a0.ignore()
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...")
            self.api.stop_all_models()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(self, 'update_timer'):
                self.update_timer.stop()

            # –û—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫–∏
            if hasattr(self, 'message_thread') and self.message_thread is not None:
                self.message_thread.quit()
                self.message_thread.wait()

            if hasattr(a0, 'accept'):
                a0.accept()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            if hasattr(a0, 'accept'):
                a0.accept()

    def eventFilter(self, a0, a1):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        try:
            if a0 == self.message_input and a1.type() == a1.Type.KeyPress:
                key_event = a1
                if hasattr(key_event, 'key') and hasattr(key_event, 'modifiers'):
                    if key_event.key() == Qt.Key.Key_Return and not (key_event.modifiers() & Qt.KeyboardModifier.ShiftModifier):
                        self.send_message()
                        return True
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –≤ eventFilter: {e}")
        return super().eventFilter(a0, a1)

    def _initialize_interface(self, main_layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
            splitter = QSplitter(Qt.Orientation.Horizontal)
            main_layout.addWidget(splitter)

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
            left_panel = QWidget()
            left_layout = QVBoxLayout(left_panel)
            left_layout.setContentsMargins(10, 10, 10, 10)

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            model_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:")
            self.model_combo = QComboBox()
            self.model_combo.addItem("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            left_layout.addWidget(model_label)
            left_layout.addWidget(self.model_combo)

            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            self.model_status = QLabel("–°—Ç–∞—Ç—É—Å: –ù–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.model_status.setStyleSheet("""
                QLabel {
                    color: #757575;
                    margin-top: 5px;
                    padding: 5px;
                    border-radius: 4px;
                    background-color: #F5F5F5;
                }
            """)
            left_layout.addWidget(self.model_status)

            # –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_layout = QHBoxLayout()

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏
            model_settings_btn = QPushButton("‚öô –ú–æ–¥–µ–ª—å")
            model_settings_btn.clicked.connect(self._toggle_model_settings)
            model_settings_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #1976D2; }
                QPushButton:pressed { background-color: #1565C0; }
            """)
            settings_layout.addWidget(model_settings_btn)

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama
            ollama_settings_btn = QPushButton("‚öô Ollama")
            ollama_settings_btn.clicked.connect(self._show_ollama_settings)
            ollama_settings_btn.setStyleSheet("""
                QPushButton {
                    background-color: #673AB7;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #5E35B1; }
                QPushButton:pressed { background-color: #512DA8; }
            """)
            settings_layout.addWidget(ollama_settings_btn)

            # –ö–Ω–æ–ø–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimize_btn = QPushButton("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            optimize_btn.clicked.connect(self._show_optimization_info)
            optimize_btn.setStyleSheet("""
                QPushButton {
                    background-color: #FF9800;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #F57C00; }
                QPushButton:pressed { background-color: #EF6C00; }
            """)
            settings_layout.addWidget(optimize_btn)

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama
            jan_settings_btn = QPushButton("‚öô Jan")
            # jan_settings_btn.clicked.connect(self._show_jan_settings)
            jan_settings_btn.setStyleSheet("""
                QPushButton {
                    background-color: #333;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #5E35B1; }
                QPushButton:pressed { background-color: #512DA8; }
            """)
            settings_layout.addWidget(jan_settings_btn)

            # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
            stats_btn = QPushButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            stats_btn.clicked.connect(self._show_session_stats)
            stats_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px;
                    margin-top: 10px;
                }
                QPushButton:hover { background-color: #45a049; }
                QPushButton:pressed { background-color: #3d8b40; }
            """)
            settings_layout.addWidget(stats_btn)

            left_layout.addLayout(settings_layout)

            left_layout.addStretch()

            try:
                # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏ ---
                self.auto_start_model_checkbox = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–¥–µ–ª—å")
                self.auto_start_model_checkbox.setChecked(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
                left_layout.addWidget(self.auto_start_model_checkbox)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QCheckBox: {str(e)}")

            left_panel.setMinimumWidth(200)
            left_panel.setMaximumWidth(300)
            splitter.addWidget(left_panel)

            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (—á–∞—Ç)
            chat_panel = QWidget()
            chat_layout = QVBoxLayout(chat_panel)
            chat_layout.setContentsMargins(10, 10, 10, 10)

            self.chat_history = ChatHistory()
            chat_layout.addWidget(self.chat_history)

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            input_layout = QHBoxLayout()
            input_layout.setSpacing(10)

            self.message_input = QTextEdit()
            self.message_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            self.message_input.setMaximumHeight(100)
            self.message_input.setStyleSheet("""
                QTextEdit {
                    background-color: white;
                    border: 1px solid #E0E0E0;
                    border-radius: 4px;
                    padding: 8px;
                    font-family: 'Segoe UI', Arial, sans-serif;
                    font-size: 14px;
                    line-height: 1.4;
                }
                QTextEdit:focus {
                    border-color: #2962FF;
                }
            """)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏—à–∏ Enter
            self.message_input.installEventFilter(self)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons_layout = QHBoxLayout()
            buttons_layout.setSpacing(10)

            send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
            send_button.setObjectName("send_button")  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            send_button.setMinimumWidth(100)
            send_button.setEnabled(False)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            send_button.setStyleSheet("""
                QPushButton {
                    background-color: #2962FF;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px 16px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #1E88E5;
                }
                QPushButton:pressed {
                    background-color: #1565C0;
                }
                QPushButton:disabled {
                    background-color: #BDBDBD;
                }
            """)
            send_button.clicked.connect(self.send_message)
            buttons_layout.addWidget(send_button)

            # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.stop_generation_button = QPushButton("‚èπ –°—Ç–æ–ø")
            self.stop_generation_button.setMinimumWidth(80)
            self.stop_generation_button.setEnabled(False)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            self.stop_generation_button.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px 16px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #da190b;
                }
                QPushButton:pressed {
                    background-color: #d32f2f;
                }
                QPushButton:disabled {
                    background-color: #BDBDBD;
                }
            """)
            self.stop_generation_button.clicked.connect(self.stop_generation)
            buttons_layout.addWidget(self.stop_generation_button)

            input_layout.addWidget(self.message_input)
            input_layout.addLayout(buttons_layout)
            chat_layout.addLayout(input_layout)

            splitter.addWidget(chat_panel)

            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            self.model_settings = ModelSettings()
            self.model_settings.setMinimumWidth(250)
            self.model_settings.setMaximumWidth(350)
            self.model_settings.settings_saved.connect(self.on_model_settings_saved)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            current_settings = self.api.get_current_settings()
            runtime_settings = current_settings.get('runtime_settings', {})
            model_settings = current_settings.get('model_settings', {})

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            interface_settings = {**runtime_settings, **model_settings}
            self.model_settings.load_settings(interface_settings)

            splitter.addWidget(self.model_settings)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞
            splitter.setStretchFactor(0, 0)  # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
            splitter.setStretchFactor(1, 1)  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
            splitter.setStretchFactor(2, 0)  # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.model_combo.currentTextChanged.connect(self.on_model_changed)

            # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            self.update_timer = QTimer()
            self.update_timer.timeout.connect(self.update_models)
            self.update_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

            # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
            # self.update_models()

        except Exception as ui_error:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(ui_error)}")
            raise

    def update_models(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        if not hasattr(self, 'initialization_complete') or not self.initialization_complete:
            logging.warning("–ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            current = self.model_combo.currentText().split(" (")[
                0] if self.model_combo.currentText() else None

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models = self.api.get_models()
            if not isinstance(models, list):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            new_models = set(
                model['name'] for model in models if isinstance(model, dict) and 'name' in model)
            current_models = set(self.model_combo.itemText(i).split(" (")[0]
                                 for i in range(self.model_combo.count()))

            if new_models == current_models and current in new_models:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.model_combo.blockSignals(True)

            try:
                # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                self.model_combo.clear()

                if not models:
                    self.model_combo.addItem("–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                    self.update_model_status("–ù–µ—Ç –º–æ–¥–µ–ª–µ–π", True)
                    self.current_model = None
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–æ–∫
                for model in models:
                    if not isinstance(model, dict) or 'name' not in model:
                        continue

                    name = model.get('name', '')
                    size = model.get('size', '–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

                    if not name:
                        continue

                    # –ú–æ–¥–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–æ–π –∫ —Ä–∞–±–æ—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    status = " (–ì–æ—Ç–æ–≤–∞)"

                    self.model_combo.addItem(f"{name}{status} ({size})")

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                    self.api.running_models.add(name)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
                if current and current in new_models:
                    index = self.model_combo.findText(current, Qt.MatchFlag.MatchStartsWith)
                    if index >= 0:
                        self.model_combo.setCurrentIndex(index)
                        self.current_model = current
                        # –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
                        self.update_model_status(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: {current}")
                        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {current}")
                elif self.model_combo.count() > 0:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
                    self.model_combo.setCurrentIndex(0)
                    self.current_model = self.model_combo.currentText().split(" (")[0]
                    self.update_model_status(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: {self.current_model}")
                    logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å: {self.current_model}")

            finally:
                self.model_combo.blockSignals(False)
                self.model_combo.setEnabled(True)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
            self.model_combo.clear()
            self.model_combo.addItem(f"–û—à–∏–±–∫–∞: {str(e)}")
            self.update_model_status("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", True)
            self.current_model = None
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            send_button = self.findChild(QPushButton, "send_button")
            if send_button:
                send_button.setEnabled(False)

    def update_model_status(self, status: str, is_error: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        color = "#D32F2F" if is_error else "#2E7D32"
        self.model_status.setText(f"–°—Ç–∞—Ç—É—Å: {status}")
        self.model_status.setStyleSheet(f"color: {color}; margin-top: 5px;")

    def _update_buttons_state(self, is_available: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(is_available)

    def check_model_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if not self.current_model:
            QApplication.processEvents()
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å (–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            models = self.api.get_models()
            model_names = [model['name'] for model in models]

            if self.current_model in model_names:
                # –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
                self.chat_history.add_system_message(f"‚úÖ –ú–æ–¥–µ–ª—å {self.current_model} –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                self.update_model_status(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: {self.current_model}")
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_button = self.findChild(QPushButton, "send_button")
                if send_button:
                    send_button.setEnabled(True)
                    QApplication.processEvents()
                self._update_buttons_state(True)
                return True
            else:
                self.chat_history.add_system_message(
                    f"‚ùå –ú–æ–¥–µ–ª—å {self.current_model} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.update_model_status(f"–ú–æ–¥–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", True)
                self._update_buttons_state(False)
                return False

        except Exception as e:
            error_msg = str(e)
            self.chat_history.add_system_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–∏: {error_msg}")
            self.update_model_status(f"–û—à–∏–±–∫–∞: {error_msg[:50]}...", True)
            self._update_buttons_state(False)
            return False

    def on_model_changed(self, model_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"""
        try:
            if not model_text or "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π" in model_text or "–û—à–∏–±–∫–∞:" in model_text:
                self.current_model = None
                self.update_model_status("–ù–µ –≤—ã–±—Ä–∞–Ω–∞", True)
                self.chat_history.add_system_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                self._update_buttons_state(False)
                return

            try:
                self.current_model = model_text.split(" (")[0]
                if not self.current_model:
                    raise ValueError("–ü—É—Å—Ç–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏")
                logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.current_model}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
                self.current_model = None
                self.update_model_status("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏", True)
                self._update_buttons_state(False)
                return

            self.chat_history.add_system_message(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏: {self.current_model}")
            self.update_model_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...")

            # –ú–æ–¥–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

            if self.check_model_availability():
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ check_model_availability
                pass
            else:
                self.chat_history.add_system_message(
                    "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω\n"
                    "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama\n"
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏\n"
                    "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª Ollama –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"
                )
                self._update_buttons_state(False)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏: {str(e)}")
            self.update_model_status("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏", True)
            self._update_buttons_state(False)

    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.current_model:
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å")
            return
        messages = self.message_input.toPlainText().strip()
        if not messages:
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {messages}")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {self.current_model}")
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_input.setReadOnly(True)
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(False)
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_generation_button.setEnabled(True)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_history.add_message(messages, True)
        self.message_input.clear()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_model_status(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            params = self.model_settings.get_parameters()
            logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {params}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.generation_start_time = time.time()
            self.total_tokens = 0
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_thread = MessageThread(
                self.api,
                self.current_model,
                self.messages,
                **params
            )
            self.messages.append({"role": "user", "content": messages})
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.message_thread.message_chunk.connect(self.on_message_chunk)
            self.message_thread.finished.connect(self.on_message_complete)
            self.message_thread.error.connect(self.on_message_error)
            self.message_thread.performance_info.connect(
                lambda perf: self.chat_history.add_performance_info(perf))
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                self.message_thread.extended_stats.connect(self.on_extended_stats)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª extended_stats: {e}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            self.message_thread.start()
        except Exception as e:
            import traceback
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n{traceback.format_exc()}"
            logging.error(error_msg)
            self.on_message_error(error_msg)

    def on_message_chunk(self, chunk: str):
        self.current_response += chunk
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏"""
        self.chat_history.add_message_chunk(chunk)
        if self.total_tokens is not None:
            self.total_tokens += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤

    def on_message_complete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.generation_start_time is not None:
            total_time = time.time() - self.generation_start_time
        else:
            total_time = 0.0

        performance_info = {
            'total_time': total_time,
            'tokens': self.total_tokens or 0,
            'model': self.current_model
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ add_message

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –í–ê–ñ–ù–û: —ç—Ç–∞ —á–∞—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.chat_history.add_message(self.current_response, False, performance_info)
        self.messages.append({"role": "assistant", "content": self.current_response})
        self.current_response = ""

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        #self.chat_history.add_message("", False, self.message_thread.performance_info)
        self.message_input.setReadOnly(False)
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(True)
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_generation_button.setEnabled(False)
        self.update_model_status(f"–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: {self.current_model}")

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫
        if hasattr(self, 'message_thread') and self.message_thread is not None:
            self.message_thread.deleteLater()
            self.message_thread = None

    def on_extended_stats(self, stats: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        if not hasattr(self, 'session_stats'):
            self.session_stats = {
                'total_input_tokens': 0,
                'total_output_tokens': 0,
                'total_generations': 0,
                'total_time': 0.0
            }

        self.session_stats['total_input_tokens'] += stats.get('input_tokens', 0)
        self.session_stats['total_output_tokens'] += stats.get('output_tokens', 0)
        self.session_stats['total_generations'] += 1
        self.session_stats['total_time'] += stats.get('total_time', 0.0)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.chat_history.add_extended_performance_info(stats)

    def on_message_error(self, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        import traceback
        trace = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {error_msg}\n{trace}")
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {error_msg}\n{trace}")
        self.update_model_status(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", True)
        self.chat_history.add_message(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}\n{trace}", False)

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.message_input.setReadOnly(False)
        send_button = self.findChild(QPushButton, "send_button")
        if send_button:
            send_button.setEnabled(True)
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_generation_button.setEnabled(False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        if not self.check_model_availability():
            self.chat_history.add_message(
                "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Ollama\n"
                "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å\n"
                "3. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å",
                False
            )


    def stop_generation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if hasattr(self, 'message_thread') and self.message_thread is not None:
            logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.message_thread.cancel()
            self.chat_history.add_system_message("‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.message_input.setReadOnly(False)
            send_button = self.findChild(QPushButton, "send_button")
            if send_button:
                send_button.setEnabled(True)
            self.stop_generation_button.setEnabled(False)
            self.update_model_status(f"–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: {self.current_model}")

    def on_model_settings_saved(self, settings: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏"""
        try:
            logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {settings}")

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            sync_result = self.api.sync_with_user_settings(settings)

            if sync_result['needs_restart']:
                self.chat_history.add_system_message(
                    f"üîÑ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {', '.join(sync_result['critical_params_changed'])}"
                )
                self.chat_history.add_system_message("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Ollama...")
                self.update_model_status("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                import time
                time.sleep(3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
                is_available, version = self.api.is_available()
                if is_available:
                    self.chat_history.add_system_message("‚úÖ –°–µ—Ä–≤–µ—Ä Ollama –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    self.update_model_status(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: {self.current_model}")
                else:
                    self.chat_history.add_system_message("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    self.update_model_status("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", True)
            else:
                self.chat_history.add_system_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
            self.model_settings.load_settings(settings)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏: {str(e)}")
            self.chat_history.add_system_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

    def _toggle_model_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏"""
        if self.model_settings.isVisible():
            self.model_settings.hide()
        else:
            self.model_settings.show()

    def _show_ollama_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama"""
        try:
            settings_dialog = OllamaSettings(self)
            settings_dialog.show()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º show() –≤–º–µ—Å—Ç–æ exec()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")

    def _show_optimization_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimization_info = self.api.get_current_settings()

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            dialog = QDialog(self)
            dialog.setWindowTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            dialog.setMinimumWidth(600)
            dialog.setMinimumHeight(400)

            layout = QVBoxLayout(dialog)

            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            system_group = QGroupBox("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
            system_layout = QFormLayout()

            system_info = optimization_info.get('system_info', {})
            system_layout.addRow("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:", QLabel(str(system_info.get('platform', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))))
            system_layout.addRow("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:", QLabel(str(system_info.get('processor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))))
            system_layout.addRow("–Ø–¥–µ—Ä CPU:", QLabel(str(system_info.get('cpu_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))))
            system_layout.addRow("–ü–∞–º—è—Ç—å (–ì–ë):", QLabel(str(system_info.get('memory_gb', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))))
            system_layout.addRow("GPU:", QLabel(str(system_info.get('gpu', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))))
            system_layout.addRow("–ü–∞–º—è—Ç—å GPU (–ì–ë):", QLabel(str(system_info.get('gpu_memory_gb', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))))

            system_group.setLayout(system_layout)
            layout.addWidget(system_group)

            # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            server_group = QGroupBox("–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            server_layout = QFormLayout()

            server_settings = optimization_info.get('server_settings', {})
            for key, value in server_settings.items():
                server_layout.addRow(key + ":", QLabel(str(value)))

            server_group.setLayout(server_layout)
            layout.addWidget(server_group)

            # Runtime –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            runtime_group = QGroupBox("Runtime –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            runtime_layout = QFormLayout()

            runtime_settings = optimization_info.get('runtime_settings', {})
            for key, value in runtime_settings.items():
                runtime_layout.addRow(key + ":", QLabel(str(value)))

            runtime_group.setLayout(runtime_layout)
            layout.addWidget(runtime_group)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
            model_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
            model_layout = QFormLayout()

            model_settings = optimization_info.get('model_settings', {})
            for key, value in model_settings.items():
                model_layout.addRow(key + ":", QLabel(str(value)))

            model_group.setLayout(model_layout)
            layout.addWidget(model_group)

            # –ö–Ω–æ–ø–∫–∏
            buttons_layout = QHBoxLayout()

            reload_btn = QPushButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
            reload_btn.clicked.connect(lambda: self._reload_optimization(dialog))
            buttons_layout.addWidget(reload_btn)

            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(dialog.accept)
            buttons_layout.addWidget(close_btn)

            layout.addLayout(buttons_layout)

            dialog.exec()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

    def _reload_optimization(self, dialog):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            if self.api.reload_optimization():
                QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–∏–∞–ª–æ–≥–µ
                self._show_optimization_info()
                dialog.accept()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

    def _apply_user_settings_to_server(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
            user_settings = self.model_settings.get_parameters()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            sync_result = self.api.sync_with_user_settings(user_settings)

            if sync_result['needs_restart']:
                self.chat_history.add_system_message(
                    f"üîÑ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {', '.join(sync_result['critical_params_changed'])}"
                )
                self.chat_history.add_system_message("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
                self.update_model_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
                import time
                time.sleep(2)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
                is_available, version = self.api.is_available()
                if is_available:
                    self.chat_history.add_system_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É")
                    self.update_model_status(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: {self.current_model}")
                else:
                    self.chat_history.add_system_message("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                    self.update_model_status("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", True)
            else:
                self.chat_history.add_system_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
            self.chat_history.add_system_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


    def _show_jan_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ollama"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–∫–Ω–æ –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
            if not hasattr(self, '_jan_settings_window'):
                self._jan_settings_window = JanSettingsWindow()
            self._jan_settings_window.show()
            self._jan_settings_window.raise_()  # –ü–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            self._jan_settings_window.activateWindow()  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Jan: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")

    def _show_session_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        try:
            if not hasattr(self, 'session_stats') or not self.session_stats.get('total_generations', 0):
                QMessageBox.information(self, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏", "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Ö")
                return

            stats = self.session_stats

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            dialog = QDialog(self)
            dialog.setWindowTitle("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
            dialog.setMinimumWidth(500)
            dialog.setMinimumHeight(300)

            layout = QVBoxLayout(dialog)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = QLabel("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
            title_label.setStyleSheet("font-size: 16px; font-weight: bold; margin-bottom: 10px;")
            layout.addWidget(title_label)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_group = QGroupBox("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            stats_layout = QFormLayout()

            total_generations = stats.get('total_generations', 0)
            total_input = stats.get('total_input_tokens', 0)
            total_output = stats.get('total_output_tokens', 0)
            total_time = stats.get('total_time', 0.0)

            avg_time = total_time / total_generations if total_generations > 0 else 0
            avg_input = total_input / total_generations if total_generations > 0 else 0
            avg_output = total_output / total_generations if total_generations > 0 else 0
            total_tokens = total_input + total_output

            stats_layout.addRow("–ì–µ–Ω–µ—Ä–∞—Ü–∏–π:", QLabel(str(total_generations)))
            stats_layout.addRow("–í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:", QLabel(f"{total_input:,}"))
            stats_layout.addRow("–í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:", QLabel(f"{total_output:,}"))
            stats_layout.addRow("–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:", QLabel(f"{total_tokens:,}"))
            stats_layout.addRow("–û–±—â–µ–µ –≤—Ä–µ–º—è:", QLabel(f"{total_time:.2f}—Å"))
            stats_layout.addRow("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:", QLabel(f"{avg_time:.2f}—Å"))
            stats_layout.addRow("–°—Ä–µ–¥–Ω–∏–π –≤–≤–æ–¥:", QLabel(f"{avg_input:.0f} —Ç–æ–∫–µ–Ω–æ–≤"))
            stats_layout.addRow("–°—Ä–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥:", QLabel(f"{avg_output:.0f} —Ç–æ–∫–µ–Ω–æ–≤"))

            stats_group.setLayout(stats_layout)
            layout.addWidget(stats_group)

            # –ö–Ω–æ–ø–∫–∏
            buttons_layout = QHBoxLayout()

            reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            reset_btn.clicked.connect(lambda: self._reset_session_stats(dialog))
            buttons_layout.addWidget(reset_btn)

            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(dialog.accept)
            buttons_layout.addWidget(close_btn)

            layout.addLayout(buttons_layout)

            dialog.exec()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

    def _reset_session_stats(self, dialog):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.session_stats = {
                'total_input_tokens': 0,
                'total_output_tokens': 0,
                'total_generations': 0,
                'total_time': 0.0
            }
            self.chat_history.add_system_message("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–±—Ä–æ—à–µ–Ω–∞")
            dialog.accept()

    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            self.chat_history.clear()
